// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface CreateProductRequest {
  name: string;
  sku: string;
  stock: number;
  price: number;
  category: string;
  description: string;
}

export interface CreateProductResponse {
  status: number;
  error: string[];
  id: number;
}

export interface FindOneData {
  id: number;
  name: string;
  sku: string;
  stock: number;
  price: number;
  category: string;
  description: string;
}

export interface FindOneRequest {
  id: number;
}

export interface FindOneResponse {
  status: number;
  error: string[];
  data: FindOneData | undefined;
}

export interface DecreaseStockRequest {
  id: number;
  orderId: number;
}

export interface DecreaseStockResponse {
  status: number;
  error: string[];
}

export interface UpdateProductRequest {
  productId: number;
  product: Product | undefined;
}

export interface UpdateProductResponse {
  status: number;
  error: string[];
  updatedProduct: Product | undefined;
}

export interface Product {
  id: number;
  name: string;
  sku: string;
  stock: number;
  price: number;
  category: string;
  description: string;
}

export interface FindByCategoryRequest {
  category: string;
}

export interface FindByCategoryResponse {
  status: number;
  error: string[];
  products: Product[];
}

export interface FindAllRequest {
}

export interface FindAllResponse {
  status: number;
  error: string[];
  products: Product[];
}

export interface FindByNameRequest {
  name: string;
}

export interface FindByNameResponse {
  status: number;
  error: string[];
  products: Product[];
}

export interface DeleteProductRequest {
  id: number;
}

export interface DeleteProductResponse {
  status: number;
  error: string[];
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  createProduct(request: CreateProductRequest): Observable<CreateProductResponse>;

  decreaseStock(request: DecreaseStockRequest): Observable<DecreaseStockResponse>;

  findOne(request: FindOneRequest): Observable<FindOneResponse>;

  findAll(request: FindAllRequest): Observable<FindAllResponse>;

  findByName(request: FindByNameRequest): Observable<FindByNameResponse>;

  findByCategory(request: FindByCategoryRequest): Observable<FindByCategoryResponse>;

  deleteProduct(request: DeleteProductRequest): Observable<DeleteProductResponse>;

  updateProduct(request: UpdateProductRequest): Observable<UpdateProductResponse>;
}

export interface ProductServiceController {
  createProduct(
    request: CreateProductRequest,
  ): Promise<CreateProductResponse> | Observable<CreateProductResponse> | CreateProductResponse;

  decreaseStock(
    request: DecreaseStockRequest,
  ): Promise<DecreaseStockResponse> | Observable<DecreaseStockResponse> | DecreaseStockResponse;

  findOne(request: FindOneRequest): Promise<FindOneResponse> | Observable<FindOneResponse> | FindOneResponse;

  findAll(request: FindAllRequest): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  findByName(
    request: FindByNameRequest,
  ): Promise<FindByNameResponse> | Observable<FindByNameResponse> | FindByNameResponse;

  findByCategory(
    request: FindByCategoryRequest,
  ): Promise<FindByCategoryResponse> | Observable<FindByCategoryResponse> | FindByCategoryResponse;

  deleteProduct(
    request: DeleteProductRequest,
  ): Promise<DeleteProductResponse> | Observable<DeleteProductResponse> | DeleteProductResponse;

  updateProduct(
    request: UpdateProductRequest,
  ): Promise<UpdateProductResponse> | Observable<UpdateProductResponse> | UpdateProductResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createProduct",
      "decreaseStock",
      "findOne",
      "findAll",
      "findByName",
      "findByCategory",
      "deleteProduct",
      "updateProduct",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
