// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface CreateOrderRequest {
  products: OrderItem[];
  userId: number;
  nameTable: string;
  email: string;
}

export interface OrderItem {
  productId: number;
  quantity: number;
  modifications: string;
  productName: string;
  pricePerUnit: number;
  totalPrice: number;
}

export interface CreateOrderResponse {
  status: number;
  errors: string[];
  id: number;
}

export interface GetUserRequest {
  userId: number;
}

export interface GetUserResponse {
  status: number;
  errors: string[];
  user: User | undefined;
}

export interface GetOrderRequest {
  orderId: number;
}

export interface GetOrderResponse {
  status: number;
  errors: string[];
  order: Order | undefined;
}

export interface GetAllOrdersRequest {
}

export interface GetAllOrdersResponse {
  status: number;
  errors: string[];
  orders: Order[];
}

export interface User {
  id: number;
  email: string;
  role: string;
  name: string;
}

export interface Order {
  id: number;
  userId: number;
  table: Table | undefined;
  totalPrice: number;
  items: OrderItem[];
  user: User | undefined;
  email: string;
}

export interface Table {
  id: number;
  name: string;
  quantity: number;
  state: string;
}

export interface CreateTableRequest {
  name: string;
  quantity: number;
  state: string;
}

export interface CreateTableResponse {
  status: number;
  errors: string[];
}

export interface GetAllTablesRequest {
}

export interface GetAllTablesResponse {
  status: number;
  errors: string[];
  tables: Table[];
}

export interface GetTablesByNameRequest {
  name: string;
}

export interface GetTablesByNameResponse {
  status: number;
  errors: string[];
  table: Table | undefined;
}

export interface UpdateTableStateRequest {
  id: number;
  quantity: number;
  state: string;
}

export interface UpdateTableStateResponse {
  status: number;
  errors: string[];
}

export interface Sale {
  id: number;
  userName: string;
  tableName: string;
  date: string;
  tip: number;
  totalPrice: number;
  products: OrderItem[];
}

export interface CreateSaleRequest {
  userName: string;
  tableName: string;
  date: string;
  tip: number;
  totalPrice: number;
  products: OrderItem[];
  email: string;
}

export interface CreateSaleResponse {
  status: number;
  errors: string[];
}

export interface GetAllSalesRequest {
}

export interface GetAllSalesResponse {
  status: number;
  errors: string[];
  sales: Sale[];
}

export interface GetSalesByUserRequest {
  userName: string;
}

export interface GetSalesByUserResponse {
  status: number;
  errors: string[];
  sales: Sale[];
}

export interface GetSalesByDateRequest {
  date: string;
}

export interface GetSalesByDateResponse {
  status: number;
  errors: string[];
  sales: Sale[];
}

export interface DeleteOrderItemRequest {
  orderId: number;
  productId: number;
}

export interface DeleteOrderItemResponse {
  status: number;
  errors: string[];
}

export interface UpdateOrderRequest {
  orderId: number;
  userId: number;
  nameTable: string;
  email: string;
}

export interface UpdateOrderResponse {
  status: number;
  errors: string[];
  order: Order | undefined;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<CreateOrderResponse>;

  getUser(request: GetUserRequest): Observable<GetUserResponse>;

  getOrder(request: GetOrderRequest): Observable<GetOrderResponse>;

  getAllOrders(request: GetAllOrdersRequest): Observable<GetAllOrdersResponse>;

  createTable(request: CreateTableRequest): Observable<CreateTableResponse>;

  getAllTables(request: GetAllTablesRequest): Observable<GetAllTablesResponse>;

  getTablesByName(request: GetTablesByNameRequest): Observable<GetTablesByNameResponse>;

  updateTableState(request: UpdateTableStateRequest): Observable<UpdateTableStateResponse>;

  createSale(request: CreateSaleRequest): Observable<CreateSaleResponse>;

  getAllSales(request: GetAllSalesRequest): Observable<GetAllSalesResponse>;

  getSalesByUser(request: GetSalesByUserRequest): Observable<GetSalesByUserResponse>;

  getSalesByDate(request: GetSalesByDateRequest): Observable<GetSalesByDateResponse>;

  deleteOrderItem(request: DeleteOrderItemRequest): Observable<DeleteOrderItemResponse>;

  updateOrder(request: UpdateOrderRequest): Observable<UpdateOrderResponse>;
}

export interface OrderServiceController {
  createOrder(
    request: CreateOrderRequest,
  ): Promise<CreateOrderResponse> | Observable<CreateOrderResponse> | CreateOrderResponse;

  getUser(request: GetUserRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  getOrder(request: GetOrderRequest): Promise<GetOrderResponse> | Observable<GetOrderResponse> | GetOrderResponse;

  getAllOrders(
    request: GetAllOrdersRequest,
  ): Promise<GetAllOrdersResponse> | Observable<GetAllOrdersResponse> | GetAllOrdersResponse;

  createTable(
    request: CreateTableRequest,
  ): Promise<CreateTableResponse> | Observable<CreateTableResponse> | CreateTableResponse;

  getAllTables(
    request: GetAllTablesRequest,
  ): Promise<GetAllTablesResponse> | Observable<GetAllTablesResponse> | GetAllTablesResponse;

  getTablesByName(
    request: GetTablesByNameRequest,
  ): Promise<GetTablesByNameResponse> | Observable<GetTablesByNameResponse> | GetTablesByNameResponse;

  updateTableState(
    request: UpdateTableStateRequest,
  ): Promise<UpdateTableStateResponse> | Observable<UpdateTableStateResponse> | UpdateTableStateResponse;

  createSale(
    request: CreateSaleRequest,
  ): Promise<CreateSaleResponse> | Observable<CreateSaleResponse> | CreateSaleResponse;

  getAllSales(
    request: GetAllSalesRequest,
  ): Promise<GetAllSalesResponse> | Observable<GetAllSalesResponse> | GetAllSalesResponse;

  getSalesByUser(
    request: GetSalesByUserRequest,
  ): Promise<GetSalesByUserResponse> | Observable<GetSalesByUserResponse> | GetSalesByUserResponse;

  getSalesByDate(
    request: GetSalesByDateRequest,
  ): Promise<GetSalesByDateResponse> | Observable<GetSalesByDateResponse> | GetSalesByDateResponse;

  deleteOrderItem(
    request: DeleteOrderItemRequest,
  ): Promise<DeleteOrderItemResponse> | Observable<DeleteOrderItemResponse> | DeleteOrderItemResponse;

  updateOrder(
    request: UpdateOrderRequest,
  ): Promise<UpdateOrderResponse> | Observable<UpdateOrderResponse> | UpdateOrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createOrder",
      "getUser",
      "getOrder",
      "getAllOrders",
      "createTable",
      "getAllTables",
      "getTablesByName",
      "updateTableState",
      "createSale",
      "getAllSales",
      "getSalesByUser",
      "getSalesByDate",
      "deleteOrderItem",
      "updateOrder",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
